import chalk from "chalk";
import { Cdek } from "./cdek-service";
import {
  RegisterOrderDto,
  UpdateOrderDto,
} from "./cdek-service/order/dto/order.dto";

const cdek = new Cdek(
  "wqGwiQx0gg8mLtiEKsUinjVSICCjtTEP",
  "RmAmgvSgSl1yirlz9QupbzOJVqhCxcP5",
  "https://api.edu.cdek.ru/v2"
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logSuccess(message: string) {
  console.log(chalk.green.bold(`‚úî ${message}`));
}

function logError(message: string) {
  console.log(chalk.red.bold(`‚úñ ${message}`));
}

function logInfo(message: string) {
  console.log(chalk.blue.bold(`‚Ñπ ${message}`));
}

async function testTariff() {
  logInfo("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ...");
  try {
    const tariff = await cdek.getTariff({
      type: 1,
      from_location: { code: 164 },
      to_location: { code: 44 },
      packages: [{ weight: 1000, length: 10, width: 10, height: 10 }],
    });
    logSuccess("–¢–∞—Ä–∏—Ñ –ø–æ–ª—É—á–µ–Ω!");
  } catch (error: any) {
    logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞: " + error.message);
  }
}

async function testDeliveryPoints() {
  logInfo("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ü–í–ó...");
  try {
    const deliveryPoints = await cdek.getDeliveryPoints({
      country_code: "RU",
      size: 5,
    });
    logSuccess("–°–ø–∏—Å–æ–∫ –ü–í–ó –ø–æ–ª—É—á–µ–Ω!");
  } catch (error: any) {
    logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ü–í–ó: " + error.message);
  }
}

const orderData: RegisterOrderDto = {
  type: 1,
  number: "TEST-ORDER-001",
  tariff_code: 482,
  sender: {
    company: '–û–û–û "–¢–µ—Å—Ç"',
    name: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    phones: [{ number: "+79991234567" }],
  },
  recipient: {
    name: "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤",
    phones: [{ number: "+79997654321" }],
  },
  from_location: { code: 44 },
  to_location: {
    code: 137,
    address: "–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1",
  },
  packages: [
    {
      number: "PKG-001",
      weight: 1000,
      length: 20,
      width: 15,
      height: 10,
      items: [
        {
          name: "–ù–æ—É—Ç–±—É–∫",
          ware_key: "ZZZVVVeee",
          quantity: 1,
          price: 50000,
          weight: 1000,
          amount: 1,
          cost: 50000,
          payment: {
            value: 0,
          },
        },
      ],
    },
  ],
};

async function testCreateOrder() {
  logInfo("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–∫–∞–∑...");
  try {
    const registeredOrder = await cdek.orderRegister(orderData);
    logSuccess("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
    logInfo("–û—Ç–≤–µ—Ç –æ—Ç API - ");
    console.table(registeredOrder);
    logInfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É - ");
    console.table(registeredOrder.requests);
  } catch (error: any) {
    logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞!");
    console.error(error.response?.data?.requests?.[0]?.errors || []);
  }
}
const orderUpdData: UpdateOrderDto = {
  uuid: "14ac0613-9f10-4bae-9444-5ea19299c245",
  type: 1,
  number: "TEST-ORDER-001",
  tariff_code: 482,
  sender: {
    company: '–û–û–û "–¢–µ—Å—Ç"',
    name: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    phones: [{ number: "+79991234567" }],
  },
  recipient: {
    name: "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤",
    phones: [{ number: "+79997654321" }],
  },
  from_location: { code: 44 },
  to_location: {
    code: 137,
    address: "–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1",
  },
  packages: [
    {
      number: "PKG-001",
      weight: 1000,
      length: 20,
      width: 15,
      height: 10,
      items: [
        {
          name: "–®–∏–ª—å–¥–∏–∫",
          ware_key: "ZZZVVVeee",
          quantity: 1,
          price: 10000,
          weight: 1000,
          amount: 1,
          cost: 10000,
          payment: {
            value: 0,
          },
        },
      ],
    },
  ],
};
async function testUpdateOrder() {
  logInfo("–ò–∑–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑...");
  try {
    const registeredOrder = await cdek.orderUpdate(orderUpdData);
    logSuccess("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!");
    logInfo("–û—Ç–≤–µ—Ç –æ—Ç API - ");
    console.table(registeredOrder);
    logInfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É - ");
    console.table(registeredOrder.requests);
  } catch (error: any) {
    logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!");
    console.error(error);
  }
}

async function testGetByUUID() {
  logInfo("–ò—â–µ–º –∑–∞–∫–∞–∑...");
  try {
    const registeredOrder = await cdek.getOrderByUUID(
      "095be615-a8ad-4c33-8e9c-c7612fbf6c9f"
    );
    logSuccess("–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω!");
    logInfo("–û—Ç–≤–µ—Ç –æ—Ç API - ");
    console.table(registeredOrder);
    logInfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É - ");
    console.table(registeredOrder.requests);
  } catch (error: any) {
    logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!");
    console.error(error);
  }
}

async function testGetLocationByCity() {
  logInfo("–ò—â–µ–º –ª–æ–∫–∞—Ü–∏–∏...");
  try {
    const registeredOrder = await cdek.getLocationsByCity({
      name: "–ú–∞–≥–∞–¥–∞–Ω",
      country_code: "RU",
    });
    logSuccess("–õ–æ–∫–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞!");
    logInfo("–û—Ç–≤–µ—Ç –æ—Ç API - ");
    console.table(registeredOrder);
  } catch (error: any) {
    logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏!");
    if (
      error.message ===
      "–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º uuid (095be615-a8ad-4c33-8e9c-c7612fbf6c9f) –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    )
      console.error(error);
  }
}

async function testgetCitysList() {
  logInfo("–ò—â–µ–º –≥–æ—Ä–æ–¥–∞...");
  try {
    const registeredOrder = await cdek.getCitysList({
      country_codes: ["RU"], 
      region_code: 26, 
      size: 10, 
      page: 1, 
      lang: "RU",
    });
    logSuccess("–ì–æ—Ä–æ–¥–∞ –Ω–∞–π–¥–µ–Ω—ã!!");
    logInfo("–û—Ç–≤–µ—Ç –æ—Ç API - ");
    console.table(registeredOrder);
  } catch (error: any) {
    logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤!");
    console.error(error);
  }
}

//–†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
/*async function testgetRegionList() {
  logInfo("–ò—â–µ–º —Ä–µ–≥–∏–æ–Ω—ã...");
  try {
    const registeredOrder = await cdek.getRegionList({
      country_codes: ["RU"], 
      size: 10, 
      page: 1, 
      lang: "RU",
    });
    logSuccess("–†–µ–≥–∏–æ–Ω—ã –Ω–∞–π–¥–µ–Ω—ã!!");
    logInfo("–û—Ç–≤–µ—Ç –æ—Ç API - ");
    console.table(registeredOrder);
  } catch (error: any) {
    logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤!");
    console.error(error);
  }
}*/

//–ü–æ order_uuid –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–∞—Å—Ç, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –±–∞–∑—ã, –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ –∑–∞–∫–æ–º–µ–Ω—Ç–∏–ª
/*async function testGetCheckInfo() {
  logInfo("–ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ...");
  try {
    const registeredOrder = await cdek.getCheckInfo({
      order_uuid: "72753031-e66b-4146-ab8c-52179ef4020a",
    });
    logSuccess("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ–∫–µ –Ω–∞–π–¥–µ–Ω–∞!!");
    logInfo("–û—Ç–≤–µ—Ç –æ—Ç API - ");
    console.table(registeredOrder);
  } catch (error: any) {
    logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–∫–µ!");
    console.error(error);
  }
}*/

// üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  console.log(chalk.yellow.bold("\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ CDEK-SERVICE...\n"));
  await testTariff();
  await testDeliveryPoints();
  await testCreateOrder();
  await testGetLocationByCity();
  await testgetCitysList();
  //await testgetRegionList();
  //await testGetCheckInfo();
  await testUpdateOrder();
  await testGetByUUID();
}

runTests();
